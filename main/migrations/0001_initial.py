# Generated by Django 4.2 on 2023-05-02 20:43

import datetime
from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import main.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('ext', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Budget',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=60)),
                ('crop_year', models.SmallIntegerField()),
                ('state', models.CharField(max_length=2)),
                ('authors', models.CharField(max_length=150, null=True)),
                ('institution', models.CharField(max_length=150, null=True)),
                ('source_url', models.URLField(null=True)),
                ('created_on', models.DateField()),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FarmYear',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('farm_name', models.CharField(max_length=60)),
                ('county_code', models.SmallIntegerField(verbose_name='county')),
                ('crop_year', models.SmallIntegerField(default=main.models.get_current_year)),
                ('report_type', models.SmallIntegerField(choices=[(0, 'Pre-tax income'), (1, 'Pre-tax cash flow')], default=0, help_text='Pre-Tax cash flow deducts land debt interest and principal payments. Pre-tax Income deducts only interest expense.')),
                ('cropland_acres_owned', models.FloatField(default=0)),
                ('cropland_acres_rented', models.FloatField(default=0)),
                ('cash_rented_acres', models.FloatField(default=0)),
                ('var_rent_cap_floor_frac', models.FloatField(default=0, help_text='Floor and cap on variable rent as a percent of starting base rent', verbose_name='variable rent floor/cap')),
                ('annual_land_int_expense', models.FloatField(default=0, help_text='Annual owned land interest expense', verbose_name='land interest expense')),
                ('annual_land_principal_pmt', models.FloatField(default=0, help_text='Annual owned land principal payment', verbose_name='land principal payment')),
                ('property_taxes', models.FloatField(default=0)),
                ('land_repairs', models.FloatField(default=0)),
                ('eligible_persons_for_cap', models.SmallIntegerField(default=0, help_text="Number of eligible 'persons' for FSA payment caps.", verbose_name='# persons for cap')),
                ('budget', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='main.budget')),
                ('state', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ext.state')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='HarvestFuturesPrice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('croptype', models.CharField(choices=[('C', 'CORN'), ('S', 'SOY'), ('SRW', 'SRW'), ('HRW', 'HRW'), ('HRS', 'HRS')], max_length=6)),
                ('exchange', models.CharField(choices=[('CHI', 'CHI'), ('KC', 'KC'), ('MPLS', 'MPLS')], max_length=6)),
                ('futures_month', models.CharField(max_length=8)),
                ('price', models.FloatField(default=0)),
                ('priced_on', models.DateField(default=datetime.date(2023, 5, 2))),
                ('ins_crop_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ext.croptype')),
            ],
        ),
        migrations.CreateModel(
            name='PricedCropType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='PricedCrop',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plc_base_acres', models.FloatField(default=0, verbose_name='Base acres in PLC')),
                ('arcco_base_acres', models.FloatField(default=0, verbose_name='Base acres in ARC-CO')),
                ('plc_yield', models.FloatField(default=0, help_text='Weighted average PLC yield for farm in bushels per acre.', verbose_name='farm avg. PLC yield')),
                ('contracted_bu', models.FloatField(default=0, help_text='Current contracted bushels on futures.', verbose_name='contracted bushels')),
                ('avg_contract_price', models.FloatField(default=0, help_text='Average price for futures contracts.', verbose_name='avg. contract price')),
                ('new_target_frac', models.FloatField(default=0, help_text='New target contracted bushels as a percent of total production.', verbose_name='new target as % of production')),
                ('basis_bu_locked', models.FloatField(default=0, help_text='Number of bushels with contracted basis set.', verbose_name='bushels with basis locked')),
                ('avg_locked_basis', models.FloatField(default=0, help_text='Average basis on basis contracts in place.', verbose_name='avg. locked basis')),
                ('assumed_basis_for_new', models.FloatField(default=0)),
                ('farm_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.farmyear')),
                ('new_crop_fut_harv_price', models.ForeignKey(help_text='Current new crop futures harvest price.', on_delete=django.db.models.deletion.CASCADE, to='main.harvestfuturesprice', verbose_name='new crop futures price')),
                ('priced_crop_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.pricedcroptype')),
            ],
        ),
        migrations.CreateModel(
            name='FarmCropType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('is_fac', models.BooleanField(default=False)),
                ('ins_crop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ext.crop')),
                ('ins_crop_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ext.croptype')),
                ('priced_crop_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.pricedcroptype')),
            ],
        ),
        migrations.CreateModel(
            name='FarmCrop',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_irr', models.BooleanField(default=False, verbose_name='irrigated?')),
                ('planted_acres', models.FloatField(default=0)),
                ('rotating_acres', models.FloatField(help_text='The number of rotating acres, e.g. corn on beans.', null=True)),
                ('frac_yield_dep_nonland_cost', models.FloatField(help_text='Estimated % of non-land costs that vary with yield.', null=True, verbose_name='est. % yield-dependent cost')),
                ('ta_aph_yield', models.FloatField(default=0, help_text='Trend-adjusted average prodution history yield provided by insurer.', verbose_name='TA APH yield')),
                ('adj_yield', models.FloatField(default=0, help_text='Adjusted yield provided by insurer.', verbose_name='Adjusted yield')),
                ('rate_yield', models.FloatField(default=0, help_text='Rate yield provided by insurer.')),
                ('ye_use', models.BooleanField(default=False, help_text='Use yield exclusion option? (e.g. exclude 2012 yields)', verbose_name='use YE?')),
                ('ta_use', models.BooleanField(default=False, help_text='Use trend adjustment option? (apply a trend adjustment to yields).', verbose_name='use TA?')),
                ('price_vol_factor', models.DecimalField(decimal_places=2, help_text='Estimated price volatility factor', max_digits=2, null=True, verbose_name='price volatility factor')),
                ('proj_harv_price', models.DecimalField(decimal_places=2, help_text='Estimate for projected harvest price', max_digits=4, null=True, verbose_name='projected harvest price')),
                ('coverage_type', models.SmallIntegerField(choices=[(0, 'County (area)'), (1, 'Farm (enterprise)')], help_text='Crop insurance coverage type.', null=True)),
                ('product_type', models.SmallIntegerField(choices=[(0, 'RP'), (1, 'RP-HPE'), (2, 'YP')], help_text='Crop insurance product type.', null=True)),
                ('base_coverage_level', models.DecimalField(choices=[(0.5, '50%'), (0.55, '55%'), (0.6, '60%'), (0.65, '65%'), (0.7, '70%'), (0.75, '75%'), (0.8, '80%'), (0.85, '85%')], decimal_places=2, help_text='Coverage level for selected crop insurance product.', max_digits=2, null=True)),
                ('sco_use', models.BooleanField(default=False, help_text='Add Supplemental coverage option to bring coverage level to 86%?', verbose_name='add SCO option?')),
                ('eco_level', models.DecimalField(choices=[(0.9, '90%'), (0.95, '95%')], decimal_places=2, help_text='Enhanced coverage level', max_digits=2, null=True, verbose_name='ECO level')),
                ('prot_factor', models.FloatField(default=1, help_text='Selected payment factor for county premiums/indemnities.', verbose_name='selected payment factor')),
                ('crop_ins_prems', models.JSONField(null=True)),
                ('ins_practices', django.contrib.postgres.fields.ArrayField(base_field=models.SmallIntegerField(), size=2)),
                ('farm_crop_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.farmcroptype')),
                ('farm_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.farmyear')),
                ('ins_practice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ext.practice')),
                ('priced_crop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.pricedcrop')),
                ('subcounty', models.ForeignKey(help_text='Primary risk class (subcounty ID) provided by crop insurer', null=True, on_delete=django.db.models.deletion.CASCADE, to='ext.subcounty', verbose_name='risk class')),
            ],
        ),
        migrations.CreateModel(
            name='BudgetCropType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('is_rotated', models.BooleanField(null=True)),
                ('farm_crop_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.farmcroptype')),
            ],
        ),
        migrations.CreateModel(
            name='BudgetCrop',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('farm_yield', models.FloatField(default=0)),
                ('assumed_basis', models.FloatField(default=0)),
                ('other_gov_pmts', models.FloatField(default=0)),
                ('other_revenue', models.FloatField(default=0)),
                ('fertilizers', models.FloatField(default=0)),
                ('pesticides', models.FloatField(default=0)),
                ('seed', models.FloatField(default=0)),
                ('drying', models.FloatField(default=0)),
                ('storage', models.FloatField(default=0)),
                ('other_direct_costs', models.FloatField(default=0, help_text='Other (hauling, custom operations)')),
                ('machine_hire_lease', models.FloatField(default=0, verbose_name='machine hire or lease')),
                ('utilities', models.FloatField(default=0)),
                ('machine_repair', models.FloatField(default=0)),
                ('fuel_and_oil', models.FloatField(default=0)),
                ('light_vehicle', models.FloatField(default=0)),
                ('machine_depr', models.FloatField(default=0, verbose_name='machine depreciation')),
                ('labor_and_mgmt', models.FloatField(default=0, verbose_name='labor and management')),
                ('building_repair_and_rent', models.FloatField(default=0)),
                ('building_depr', models.FloatField(default=0, verbose_name='building depreciation')),
                ('insurance', models.FloatField(default=0)),
                ('misc_overhead_costs', models.FloatField(default=0)),
                ('interest_nonland', models.FloatField(default=0, verbose_name='non-land interest cost')),
                ('other_overhead_costs', models.FloatField(default=0)),
                ('rented_land_costs', models.FloatField(default=0)),
                ('budget', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.budget')),
                ('budget_crop_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.budgetcroptype')),
            ],
        ),
        migrations.AddConstraint(
            model_name='farmyear',
            constraint=models.UniqueConstraint(models.F('farm_name'), models.F('user'), models.F('crop_year'), name='farm_name_unique_for_user_crop_year'),
        ),
        migrations.AddConstraint(
            model_name='farmcrop',
            constraint=models.CheckConstraint(check=models.Q(('prot_factor__gte', 0), ('prot_factor__lte', 1)), name='prot_factor_in_range'),
        ),
        migrations.AddConstraint(
            model_name='budget',
            constraint=models.UniqueConstraint(models.F('name'), models.F('user'), models.F('crop_year'), models.F('created_on'), name='name_unique_for_user_crop_year_created'),
        ),
    ]
