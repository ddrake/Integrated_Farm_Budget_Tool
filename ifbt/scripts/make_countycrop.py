"""
Script countycrop: provides function make_countycrop
"""
from collections import defaultdict
from os import path

DATADIR = path.join(path.dirname(path.abspath(__file__)), '../data')

crops = {'Corn': 41, 'Soybeans': 81, 'Wheat': 11}
practices = {'Nfac (non-irrigated)': 53,
             'Nfac (Irrigated)': 94,
             'Fac (non-irrigated)': 43,
             'Fac (Irrigated)': 95,
             'Non-irrigated': 3,
             'Irrigated': 2}

# Note: 16 is only used by Corn, 997 by Soybeans and 11 by Wheat so the
# key in countycrop below needs only contain state, county, crop codes.
croptypes = {'Grain': 16, 'No Type Specified': 997, 'Winter': 11}


FILES = ('options rates highRisk enterId betaid ' +
         'eco_key grp scoArp_key scoArpw_key scoYp').split()

# These have a one-digit risk level appended to the code with a decimal point
RISK_FILES = ('rateDiff prateDiff UnitFactor punitFactor enterpriseFactor ' +
              'penterpriseFactor enterFactorRev pEnterFactorRev').split()

# These have a two-digit pvol value appended to the code with a decimal point
REV_OPT_FILES = ('grip griphr').split()


def get_county_inclusion_in_data_files():
    """
    This script can be used to identify counties with missing data in certain files
    It was used to find out that county data is missing for AL, FL, PA, VA, WV and GA
    It was also used to identify two counties with missing data: Shannon, SD (renamed
    Oglala_Lakota) and Choctaw, MS
    """
    county_sets = []
    for file in FILES:
        with open(f'{DATADIR}/{file}.txt', 'r') as f:
            contents = f.read()
        items = (line.split()[0] for line in contents.strip().split('\n'))
        county_sets.append(set((item[:-8] for item in items)))
    for file in RISK_FILES:
        with open(f'{DATADIR}/{file}.txt', 'r') as f:
            contents = f.read()
        items = (line.split()[0] for line in contents.strip().split('\n'))
        county_sets.append(set((item[:-10] for item in items)))
    for file in REV_OPT_FILES:
        with open(f'{DATADIR}/{file}.txt', 'r') as f:
            contents = f.read()
        items = (line.split()[0] for line in contents.strip().split('\n'))
        county_sets.append(set((item[:-11] for item in items)))
    return county_sets


def make_countycrop():
    """
    Constructs a dict with key the concatenation of state, county and crop codes
    and value a tuple of flags: (allow_nonirr, allow_fac).  All county-crop combinations
    fall into one of the four possible cases generated by these flags.
    We use this to validate user input.  For example, if both flags are 0, the only
    valid practice is 003: Non-irrigated.
    """
    with open(f'{DATADIR}/enterId.txt', 'r') as f:
        contents = f.read()
    items = (line.split()[0] for line in contents.strip().split('\n'))
    items = ([item[:-6], item[-6:-3], item[-3:]] for item in items
             if item[-6:-3] in ('016', '997', '011')
             and item[-3:] in ('053', '094', '043', '095', '003', '002'))
    d = defaultdict(list)
    for item in items:
        d[item[0]].append(item[2])
    ccrop = {k: (1 if '053' in v else 0,
                 1 if '094' in v else 0,
                 1 if '043' in v else 0,
                 1 if '095' in v else 0,
                 1 if '003' in v else 0,
                 1 if '002' in v else 0)
             for k, v in d.items()}
    cases = [(a, b, c, d, e, f) for a in (0, 1) for b in (0, 1) for c in (0, 1)
             for d in (0, 1) for e in (0, 1) for f in (0, 1)]
    for s in cases:
        # currently only 4 cases have nonzero counts:
        # 002 irr only: count is 210
        #    (corn, soy, wheat in certain counties of KS, NE, ND, OK, TX)
        # 002 or 003 irr or non-irr: count is 4394
        # 053 or 094 Nfac non-irr or irr: count is 77
        #    (soy in some counties of IL and IN)
        # 053, 094, 043, 095 Nfac/fac, irr/nonirr: count is 433 (all soy)
        print(s, len([v for v in ccrop.values() if v == s]))

    return ccrop
